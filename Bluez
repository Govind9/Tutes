General Setup:
    
    1. Make sure you have the latest available OS version running on pi:
        sudo apt-get update
        sudo apt-get dist-upgrade
        sudo apt-get upgrade
    
    2. Install necessary bluetooth packages:
        sudo apt-get install pi-bluetooth
        sudo apt-get install bluetooth
        sudo apt-get install bluez
        sudo apt-get install blueman
        sudo apt-get install bluez-tools
        sudo apt-get install bluez-utils
    Many of these may already be installed on your system but it doesn't hurt to be sure, so run the above commands anyway.
    
    3. Reboot your system:
        sudo reboot
        
    4. Start Bluetooth service if it is not started:
        sudo /etc/init.d/bluetooth start
        
    5. Check to see if your bluetooth is working:
    List the adapter:
        hciconfig
    Power up the adapter if it is down
        sudo hciconfig hci0 up
    You can find more information about your adapter using:
        hciconfig -a hci0
    Scan nearby devices:
        hcitool scan
    It helps to copy the Mac address of the device you wish to interact with.

Sending Files from pi to phone:
   
    1. Make your phone a ftp server,
        Install the following app from playstore:
        "Astro Bluetooth Module" By Metago
        After the app install, open it and tick on the following three if ther are disabled:
            Bluetooth
            Discoverable
            OBEX FTP Server
    
    2. Make your pi FTP capable:
        sudo apt-get update
        sudo apt-get install obexftp
    
    3. Pair to phone from pi:
        bluetoothctl
    In the interactive shell, type in the following commands":
        power on
        agent on
        default-agent
        scan on
    Select (copy) the Mac address of the phone you want to send files to.
        pair <MAC address>
        trust <MAC address>
    Open up another terminal and send the file using the following command:
        obexftp -b <MAC> -p /Path/To/File
        

Sending files from a phone to raspberry pi:
    
    1. Service discovery:
    List out the service offered by pi:
        sudo sdptool browse local | grep "Service Name"
    This will list out the names of the services currently offered by pi. In order to receive files Object Push Profile service is needed. If it is listed then all is set, otherwise you need to install it either following this tutorial (for a detailed installation): 
        http://www.instructables.com/id/Make-Raspberry-Pi-device-become-a-Bluetooth-Object/step0/Make-Raspberry-Pi-device-become-a-Bluetooth-Object/ 
    OR simply follow these instructions:
        sudo apt-get install obexpushd
    Check if the obex-data process is already running:
        ps auwx | grep obex-da
        kill -9 XXXX
    Where XXXX is the process id of obex-data process if it at all running.
    Start the installed obexpushd service:
        sudo obexpushd -B -n
    It should have the following output:
        This software comes with ABSOLUTELY NO WARRANTY.
        This is free software, and you are welcome to redistribute it
        under certain conditions.
        Listening on bluetooth/[00:00:00:00:00:00]:9
        
    2. Pairing and connecting to phone:
    Fire up another terminal window and start the bluetooth CLI:
        bluetoothctl
    This will start an interactive session using which we can do a variety of things including connecting to devices etc. To check the available command type help.
    To get a better understanding of how to use this CLI, go to the following link:
        https://wiki.archlinux.org/index.php/Bluetooth#Bluetoothctl
    Or simple type in the following commands:
        power on
        scan on
        agent on
        devices
        pair <Mac address of the phoen, copied during hcitool scan>
        trust <Mac address of the phone>
        connect <Mac address of the phone>
    
    3. Send files from the phone.
    Once the pairing is done and the connection is established, you can use your phone to select any file and send it pi.
    At the terminal where obexpushd is running you should be able to see a new file being created as the phone is sending it.
    
    4. Close obexpushd:
        ctrl + c
        
    5. Close bluetoothctl:
        quit
       
    6. Close adapter:
        sudo hciconfig hci0 down
        
        
Bluetooth Low Energy:
    
    1. Check to see if LE is supporter by your adapter:
        sudo hciconfig hci0 lestates
    If this returns a bunch of supported LE states then that is good news, if you get something like:
        Read LE supported states on hci0 returned status 1
    Then this means that LE is not supported by your adapter i.e. hci0
    
BLE Peripheral beacon:
    Steps have been taken from the following link: 
        http://www.wadewegner.com/2014/05/create-an-ibeacon-transmitter-with-the-raspberry-pi/
    
    0. Install important things:
        sudo apt-get install libusb-dev 
        sudo apt-get install libdbus-1-dev 
        sudo apt-get install libglib2.0-dev --fix-missing
        sudo apt-get install libudev-dev 
        sudo apt-get install libical-dev
        sudo apt-get install libreadline-dev
        sudo apt-get install xclip
    
    1. Start advertising in non connectable state:
        sudo hciconfig hci0 leadv 3  (use 0 for connectable)
        sudo hciconfig hci0 noscan
       
    2. Generate a UUID for your beacon:
        python -c 'import sys,uuid;sys.stdout.write(uuid.uuid4().hex)'|xclip -selection clipboard && xclip -selection clipboard -o && echo
    This will give out put as:
        636f3f8f64914bee95f7d8cc64a863b5
    
    3. Broadcast the UUID:
        sudo hcitool -i hci0 cmd 0x08 0x0008 1E 02 01 1A 1A FF 4C 00 02 15 63 6F 3F 8F 64 91 4B EE 95 F7 D8 CC 64 A8 63 B5 00 00 00 00 C8
    Where replace after 15 and before 00 with the UUID generated in the previous step.
    
    4. Download the following app on your android phone:
        Beacon Scanner
    And use it to scan the beacon.
    
    5. Stop broadcasting by:
        sudo hciconfig hci0 noleadv
        
Reading beacons using Bluez:
    
    1. Installations:
    There is a Python project that utilizes the BLE stack to scan and read beacons. Clone it's source from github:
        git clone https://github.com/switchdoclabs/BeaconAirPython.git
    In order to get it to work install the following package apart from the usual Ble packets:
        sudo apt-get install python-bluez
        
    2. Scan and Read the beacons:
        cd BeaconAirPython/ble
        sudo python testblescan.py
    This will list out beacon data in the following format:
        Beacon Mac Address, UUID, Major number, Minor number, TX power, RSSI.
        
    3. In order to simulate beacons from your Android phone, install and use the following app:
        Beacon Simulator.
        
BLE gatttool interaction:

    1. First thing that is required is a BLE peripheral to which to connect to, so for this I used an X-nucleo board
    
    2. Scan for le devices:
        sudo hcitool lescan
    Copy the address of the device you wish to connect to.
    
    3. Open interactive session using the gatttool:
        sudo gatttool -i hci0 -b <MAC> -I
    
    4. In the interactive session, type in the following commands:
        connect
    Following this command, the prompt should turn blue indicating the the connection is successful.
    Read profiles as:
        primary
    Read all the available characterstics:
        char-desc
    Read the value of a characterstic:
        char-read-hnd <The characterstic handle>
    Write to a particular characterstc:
        char-write-cmd <handle> <Value in Hex>
    Disconnect:
        disconnect
    Quit:
        quit
