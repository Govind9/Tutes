---------------------------------------------------------------------------------------------------------
Notation:
	If 'A' represents a source code of a program then
	'a' represents 'A' compiled.
---------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------
Let C1 be the source code of a good, innocent version of the C compiler.
Let c1 be the binary for the good compiler.
Let C2 be the source code of a bad, malacious version of the C compiler.
Let c2 be the binary for the bad compiler.
Let P be the source code of any program.
Let p be the binary of P when compiler by c1.
Let B be the source of a backdoor bug.
Let b be the binary of a B when compiled by c1.
Let compile() be a magical function that compiles code written in C without there being a compiler binary.
---------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------
Defination of compile:
compile(X)
{
	Compile X manually/magically and return the binary.
}
---------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------
Source code of C1:
C1(X) 
{
	/*
	 * Basically takes a source in C and returns its binary.
	 */
	return x;
}
---------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------
Source code of B:
B()
{
	/*
	 * A simple backdoor code in C, meant to be added to some other code.
	 * This may be overrises what the == operator means.
	 * So that == will return true if the two pattern matches or if a spacial master password is used.
	 */
	add backdoor;
}
---------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------
Action #1:
c1 = compile(C1);
---------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------
Source code of C1:
C2(X)
{
	/*
	 * If X is the actual C compiler then
	 * Add Backdoor code to the code of the bad compiler i.e. C2 it self
	 * Compile this new code using c1 i.e. a good compiler binary created earlier.
	 * This binary is now both infected and infectious.
	 */
	if (X == C1)
	{
		X = C2 + B;
		x = c1(X);
	}
	/*
	 * If X is a normal program then
	 * Just add Backdoor code to it i.e. infect it.
	 * And compile this binary, which basically contains a backdoor.
	 */
	else
	{
		X = X + B;
		x = c1(X);
	}
	return x;
}
---------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------
Action #2:
c2 = compile(C2);
cc = c2(C1);
delete C2
delete B
delete c1
delete compile();
---------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------
The conclusion:
So Basically what we have after action #2 is a compiler binary cc (which is both infected and infectious),
compiler code C1 (which does not have any bug).
And there is no trace of the actuall Bug source B, the bug binary b, the bad compiler source C2 
or the bad compiler binary c2.

Now the whole world is using cc to either: 
compile their programs (in which case all of these programs have a backdoor)
OR
create new compilers (in which case the new compiler is exactly like cc)
---------------------------------------------------------------------------------------------------------
