#includes:
	QtGui/QApplication : has all the main control stuff
	QPushButton
	QLabel
	QHBoxLayout : (Horizontal)used for configuaring the layout for your application/ can be taken care of automatically by the design 	section too.
	QSlider : the slider bar thingy
	QSpinBox: The one which chooses the cube size in my desktop rubix game
	QWidget : A window containing buttons, labels all that crap like the one I am using right now. mainWindow is an object of this Class.
	
QApplication prog;
AnyClass *obj = new AnyClass("SomethinG");
obj->show();
return prog.exec();

SIGNAL():
	Qt generates a signal whenever a user does something i.e. interact with the program any way. This is done by the SIGNAL() function.
	for example:
		SIGNAL(clicked()) will genereate a function whenever a user clicks the mouse button
		
SLOT():
	Whenever something happens and a SIGNAL is generated by the above function, whatever is written in the SLOT() function happens.
	for example:
		SLOT(quit())
	So basically we can call the function with the desired code as the parameter of the SLOT() function.

QButton *b = new QButton("Press!");
QObject::connect(b, SIGNAL(), &prog, SLOT());
	Actually this is how it works: QObject::connect(&FirstWidget, SIGNAL(Desired action by the user on the first widget), &SecondWidget, SLOT(Action performed on the second widget))
	So the connect function connects two widgets, whenever something is done by the user of the firswidget, the action is performed on the second widget.
b->show();

QWidget:
	QWidget *window = new QWidget;
	windoe->setWindowTitle("NoteBad");
	
QSlider:
	obj(Qt::Horizontal); //Qt::Vertical
	obj.setRange(0,100) // inegers represting the relative position of the slider, like the percentage .
	To perform something on the slider use the function: SLOT(setValue(int));
	setValue(10) changes the value;
	
QSpinBox:
	QSpinBox obj;
	obj.setRange(1,50); //the size of cubes
	To sense a change in value in the spinner use the function in SIGNAL(valueChanged(int));
	setValue(20) changes the value;
	
QHBoxLayout:
	all the widgests added to object of this class, will be alligned horizontalyy from left to right.
	QHBoxLayout *layout = new QHBoxLayout;
	layout->addWidget(spinner);
	layout->addWidget(slider);
	layout->addWidget(any other widgets's object pointer);
	Now after this the layout is set.
	We can now tell another widget to use this customised layout like:
		mainWindow->setLayout(layout);`
	